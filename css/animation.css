/* We're gonna write 7 keyframe statements in total:
zoomOut :for the wallpaper
picImage :for the picture image
picShadow :for the picture shadow
slideDown :for the name
slideUp :for all other text elements
fillUp :for the hr line
bounceIn :for the contact button */
@keyframes bounceIn {
  from {
    opacity: 0;
    transform: scale(0.5);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
@keyframes fillUp {
  from {
    transform: scaleX(0);
  }
  to {
    transform: scaleX(1);
  }
}
@keyframes picImage {
  from {
    opacity: 0;
    transform: scale(1.2) translateY(-1rem);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}
@keyframes picShadow {
  from {
    opacity: 0;
    transform: scale(1.2) translateY(4rem);
  }
  to {
    opacity: 1;
    transform: scale(1.1) translateY(0);
  }
}
@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-1rem);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(1rem);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
@keyframes zoomOut {
  from {
    opacity: 0;
    transform: scale(1.05);
  }
  to {
    opacity: 0.2;
    transform: scale(1);
  }
}
.picture-shadow,
.picture-image {
  animation-duration: 750ms;
  animation-timing-function: cubic-bezier(0, 0.5, 0.25, 1.25);
}
/* 
The animation-fill-mode set to both tells the browser to use the from values before the animation,
and to keep the to values after the animation has ended. Otherwise, the element would revert to their
non-animated styles. */

/* 2.shared */
.wallpaper,
.picture-shadow,
.picture-image,
.name,
.job,
.hr,
.description,
.contact,
.social li {
  animation-duration: 1s;
  animation-timing-function: cubic-bezier(0, 0.5, 0, 1);
  animation-fill-mode: both;
}

.contact {
  animation-name: bounceIn;
}

.wallpaper {
  animation-name: zoomOut;
  animation-timing-function: ease-out;
}
.picture-shadow {
  animation-name: picShadow;
}
.picture-image {
  animation-name: picImage;
}
.name {
  animation-name: slideDown;
}
.job {
  animation-name: slideUp;
}
.hr {
  animation-name: fillUp;
}
.description {
  animation-name: slideUp;
}
.social li {
  animation-duration: 500ms;
  animation-name: slideUp;
  animation-timing-function: cubic-bezier(0.5, 0, 0.5, 1.5);
}
/* Because all animations are happening simultaneously, it's difficult to see the effect of each of them. What
we simply need to do, is to trigger them in sequence. */

.name {
  animation-delay: 100ms;
}
.job {
  animation-delay: 200ms;
}
.hr {
  animation-delay: 300ms;
}
.description {
  animation-delay: 400ms;
}
.picture-image {
  animation-delay: 500ms;
}
.picture-shadow {
  animation-delay: 500ms;
}
.contact {
  animation-delay: 600ms;
}

/* For the social icons, we want to delay them individually. We can use the :nth-child pseudo selector to
select them: */
.social li:nth-child(1) {
  animation-delay: 800ms;
}
.social li:nth-child(2) {
  animation-delay: 900ms;
}
.social li:nth-child(3) {
  animation-delay: 1s;
}
.social li:nth-child(4) {
  animation-delay: 1.1s;
}
.social li:nth-child(5) {
  animation-delay: 1.2s;
}
