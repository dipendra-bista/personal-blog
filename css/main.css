/* 1. Base */
html {
  /* the background and color declarations set the overall tone */
  /* it usually work as the fall back for the background-image */
  background-color: #5f45bb;
  /* background-image: linear-gradient(to bottom right, #180cac, #d054e4); */
  background-image: linear-gradient(to bottom right, #06041f, #180cac);
  color: #fff;

  /* the font and text-shadow set the base typography */
  /* The font-family property takes a list of possible families. If the Quicksand font is not available, the browser
  will use the fallback font provided: sans-serif */
  /* . This usually means Arial or Helvetica on Windows
machines, San Francisco on Mac OS, and Ubuntu on Linux machines. Since your visitors will probably not
have that font, we will include it using Google Fonts. */
  font-family: "Quicksand", sans-serif;
  font-size: 16px;
  text-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);

  /* the line-height and browser-specific font-smoothing declarations make the page more readable */
  /* The line-height has a unitless value of 1.5 . It means each line of text will be 1.5 times the element's
current font size. For most of the page, and combined with the font-size: 16px declaration, this will
make each line of text 24px high */
  line-height: 1.5;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;

  /* the dimensions and overflow values ensure that the page fills up the whole viewport */

  /* always have a min-width: 300px that prevents the page from being too narrow to be readable */
  /* The min-height: 100vh ensures the page to be at least as tall as 100% of the viewport height ( vh ) */
  /* The overflow-x: hidden declaration prevents the page from scrolling horizontally while preserving the
usual vertical scroll. */
  min-width: 300px;
  min-height: 100vh;

  overflow-x: hidden;
}
/* Links are bydefault blue and underlined */
/* Using currentColor is prefered because it will pick up the color set by html before: color: #fff */
/* Sometimes, the hand cursor doesn't show up when hovering a link. That's why I always add cursor:
pointer to force the hand to show up. */
a {
  color: currentColor;
  cursor: pointer;
  text-decoration: none;
}

/* 2. Shared */
/* this makes wallpaper covers the whole screen */
/* This image is not displayed with an <img> tag because its purpose is decorative and belongs in the CSS. */
.wallpaper,
.picture-shadow,
.picture-image {
  display: block;
  height: 100%;
  left: 0;
  top: 0;
  width: 100%;
}
/* We want the job title to stand out a bit. That's why we are going to use our secondary font: Montserrat.
This font works well when the letters are uppercase and slightly spaced out. */
.job,
.button {
  font-family: "Montserrat", "Quicksand", sans-serif;
  letter-spacing: 0.3em;
  text-transform: uppercase;
}
/* We're setting some transformation and transition values shared between the button and the social links
(which are coming later). */
button,
.social a {
  transform-origin: center;
  transition-duration: 100ms;
}
/* 3. Specific */
.wallpaper {
  background-image: url("../images/austria.jpg");
  background-position: center;
  background-size: cover;
  opacity: 0.2;
  position: fixed;
}
/* the content is parent for both main and about */
/* We enable Flexbox on the .content by simply using display: flex . This makes both .side and
.about Flexbox items. */

/* The position: relative allows .content to appear above .wallpaper , and the min-height is
here to make sure .content covers the whole page. */
.content {
  display: flex;
  position: relative;
  min-height: 100vh;
}

.side {
  max-height: 20rem;
  max-width: 20rem;
}
/* The use of max-width is very practical: it just means that at any point we don't want an element to by
wider than a certain value. For readability reasons we want the .about section to never go beyond
26rem in width (which is 26 x 16px = 676px ). Since it's a block element, it will use the whole width
available up to a certain point. Depending on the length of your written content, you can play with the value
here. */
.about {
  max-width: 26rem;
}
.picture {
  padding-top: 100%;
  position: relative;
  width: 100%;
}
.picture-shadow {
  border-radius: 290486px;
  background-image: radial-gradient(#000 0%, rgba(0, 0, 0, 0) 70%);
  position: absolute;
  top: 10%;
}
.picture-image {
  border-radius: 290486px;
  position: absolute;
}
.job {
  color: #ffe479;
  font-size: 0.75rem;
}
/* The horizontal rule ( hr ) defines a semantic break between blocks of text. While keeping this semantic
value intact, we want to make this line more subtle: */

/* For more control, we're removing the border and using the background-color with a height of 1px to
define a thin short line.
The transform-origin will be used when we animate the width later on. */
.hr {
  background-color: #ff470f;
  border: none;
  content: "";
  height: 1px;
  margin-bottom: 1.5rem;
  margin-top: 1.5rem;
  transform-origin: center left;
  width: 4rem;
}
/* The description only needs to be slightly more prominent. Let's increase the font size: */
.description {
  font-size: 1.5rem;
}
/* By using display: inline-block we combine two behaviors:
inline makes sure the width is equal to its content (the button)
block makes sure surrounding elements will appear above and below
it also allows us to use margin-top
And vertical-align: top ensures the element to only use the vertical space required, and keeps the
spacing tight. */
.contact {
  display: inline-block;
  margin-top: 1.5rem;
  vertical-align: top;
}
/* The button uses the same inline-block technique as its parent.
The height of the button is proportional to the font size, and equal to 3.5 times the font size value:
the unitless line-height is equal to 1 or 0.875rem
the vertical paddings (top and bottom) are set to 1.25em each, or 1.25 times the font size
The em unit is equal to the current font size. In this case, it's similar to the unitless line height value.
If you play around with the font-size value, by setting 2rem for example, you'll notice that the button
will resize proportionally. This is very useful because we only need to update a single value to
increase/decrease the size of the button, while maintaining a perfect ratio.
We also apply some other styles:
because of the colored background and the darker text color, we remove the text-shadow
we use user-select: none so the text content can't be selected, which can happen when clicking
repeatedly on the button
to make sure the text never is displayed on two lines, we use white-space: nowrap
The transition-property and will-change values are for the button states. */
.button {
  background-color: #fff;
  border-radius: 290486px;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  color: #9013fe;
  display: inline-block;
  font-size: 0.875rem;
  line-height: 1;
  padding: 1.25em 2em;
  text-shadow: none;
  transition-property: box-shadow, transform;
  user-select: none;
  vertical-align: top;
  white-space: nowrap;
  will-change: box-shadow, transform;
}
/* 4. Responsiveness */
/* on mobile, we're having a centered vertical layout
on desktop, we're having a centered horizontal layout */

/* for mobiles device */
@media screen and (max-width: 799px) {
  .content {
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 5rem 3rem;
  }
  .side {
    margin-bottom: 3rem;
    width: 100%;
  }
}
/* for Desktops */
@media screen and (min-width: 800px) {
  .content {
    align-items: center;
    /* justify-content appears twice because the space-evenly
value is not available in all browsers, so we use space-around as a reasonable fallback. */
    justify-content: space-around;
    justify-content: space-evenly;
    padding: 4rem;
  }
  /* The .side element (which contains the image), has fixed dimensions of a 20rem by 20rem square. If
there's more horizontal space available, we don't want it to grow, hence the flex-grow: 0 . On the other
hand, we also don't want it to shrink at all, otherwise, the image would be squased. That's why flex-
shrink: 0 is used here too. */

  /* We also
want it to appear after the text content, which is why we use order: 2 */
  .side {
    flex-grow: 0;
    flex-shrink: 0;
    height: 20rem;
    margin-left: 4rem;
    order: 2;
    width: 20rem;
  }
  /* For the .about , we do want it to use the remaining space available, in both directions, which is why
flex-grow and flex-shrink have both a value of 1 . */
  .about {
    flex-grow: 1;
    flex-shrink: 1;
  }
}
/* The font size uses the rem unit: it's the root value, equal to the font size set on the html element, which
we previously set to 16px . So 2.25rem is essentially 36px . Using rem is useful because it references
a common value, and we can update the html value to set all instances of rem values */
/* The line-height is set to 1.125 It's hard to see its purpose if the text is too short (resize your browser
to reach two lines), but keeping the page value of 1.5 makes the two lines too spaced out. */
.name {
  font-size: 2.25rem;
  line-height: 1.125;
  margin-bottom: 0.5rem;
}
/* The button is the main interaction element of the page. Visitors can hover the button and click on it. */
/* The box shadow is transparent so it can work on any background color. For the transformation, we increase
the button's size by 2% with scale(1.02) and move it upwards by a few pixels with
translateY(-4px) .
When clicking the button, we want to make it look as if it was pressed downwards. */
.button:hover {
  box-shadow: 0 1.5rem 3rem rgba(0, 0, 0, 0.2);
  transform: scale(1.02) translateY(-4px);
}
/* If you reload the page repeatedly, you might notice that the layout "jumps" for a split second. That's because
at first, the icons are not loaded, and the page only displays the text and the images. Then, when the icons
finally load, the pop up, and cause the page to be redrawn, hence the jump.
To avoid this jump, we're gonna set a square area of 2rem by 2rem for each <li> list item: */
.social {
  display: flex;
  margin-top: 1.5rem;
}
.social li {
  height: 2rem;
  margin-right: 0.5rem;
  text-align: center;
  width: 2rem;
}
.social a {
  align-items: center;
  display: flex;
  font-size: 1.5rem;
  height: 2rem;
  justify-content: center;
  opacity: 0.5;
  transition-property: opacity, transform;
  width: 2rem;
  will-change: opacity, transform;
}
/* As for the button, we're gonna add some hover and active styles: */
.social a:hover {
  opacity: 1;
  transform: scale(1.25);
}
