/* 1. Base */
html {
  /* the background and color declarations set the overall tone */
  /* it usually work as the fall back for the background-image */
  background-color: #5f45bb;
  background-image: linear-gradient(to bottom right, #180cac, #d054e4);
  color: #fff;

  /* the font and text-shadow set the base typography */
  /* The font-family property takes a list of possible families. If the Quicksand font is not available, the browser
  will use the fallback font provided: sans-serif */
  /* . This usually means Arial or Helvetica on Windows
machines, San Francisco on Mac OS, and Ubuntu on Linux machines. Since your visitors will probably not
have that font, we will include it using Google Fonts. */
  font-family: "Quicksand", sans-serif;
  font-size: 16px;
  text-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);

  /* the line-height and browser-specific font-smoothing declarations make the page more readable */
  /* The line-height has a unitless value of 1.5 . It means each line of text will be 1.5 times the element's
current font size. For most of the page, and combined with the font-size: 16px declaration, this will
make each line of text 24px high */
  line-height: 1.5;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;

  /* the dimensions and overflow values ensure that the page fills up the whole viewport */

  /* always have a min-width: 300px that prevents the page from being too narrow to be readable */
  /* The min-height: 100vh ensures the page to be at least as tall as 100% of the viewport height ( vh ) */
  /* The overflow-x: hidden declaration prevents the page from scrolling horizontally while preserving the
usual vertical scroll. */
  min-width: 300px;
  min-height: 100vh;

  overflow-x: hidden;
}
/* Links are bydefault blue and underlined */
/* Using currentColor is prefered because it will pick up the color set by html before: color: #fff */
/* Sometimes, the hand cursor doesn't show up when hovering a link. That's why I always add cursor:
pointer to force the hand to show up. */
a {
  color: currentColor;
  cursor: pointer;
  text-decoration: none;
}

/* 2. Shared */
/* this makes wallpaper covers the whole screen */
/* This image is not displayed with an <img> tag because its purpose is decorative and belongs in the CSS. */
.wallpaper,
.picture-shadow,
.picture-image {
  display: block;
  height: 100%;
  left: 0;
  top: 0;
  width: 100%;
}

/* 3. Specific */
.wallpaper {
  background-image: url("../images/austria.jpg");
  background-position: center;
  background-size: cover;
  opacity: 0.2;
  position: fixed;
}
/* the content is parent for both main and about */
/* We enable Flexbox on the .content by simply using display: flex . This makes both .side and
.about Flexbox items. */

/* The position: relative allows .content to appear above .wallpaper , and the min-height is
here to make sure .content covers the whole page. */
.content {
  display: flex;
  position: relative;
  min-height: 100vh;
}

.side {
  max-height: 20rem;
  max-width: 20rem;
}
/* The use of max-width is very practical: it just means that at any point we don't want an element to by
wider than a certain value. For readability reasons we want the .about section to never go beyond
26rem in width (which is 26 x 16px = 676px ). Since it's a block element, it will use the whole width
available up to a certain point. Depending on the length of your written content, you can play with the value
here. */
.about {
  max-width: 26rem;
}
.picture {
  padding-top: 100%;
  position: relative;
  width: 100%;
}
.picture-shadow {
  border-radius: 290486px;
  background-image: radial-gradient(#000 0%, rgba(0, 0, 0, 0) 70%);
  position: absolute;
  top: 10%;
}
.picture-image {
  border-radius: 290486px;
  position: absolute;
}
/* 4. Responsiveness */
/* on mobile, we're having a centered vertical layout
on desktop, we're having a centered horizontal layout */

/* for mobiles device */
@media screen and (max-width: 799px) {
  .content {
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 5rem 3rem;
  }
  .side {
    margin-bottom: 3rem;
    width: 100%;
  }
}
/* for Desktops */
@media screen and (min-width: 800px) {
  .content {
    align-items: center;
    /* justify-content appears twice because the space-evenly
value is not available in all browsers, so we use space-around as a reasonable fallback. */
    justify-content: space-around;
    justify-content: space-evenly;
    padding: 4rem;
  }
  /* The .side element (which contains the image), has fixed dimensions of a 20rem by 20rem square. If
there's more horizontal space available, we don't want it to grow, hence the flex-grow: 0 . On the other
hand, we also don't want it to shrink at all, otherwise, the image would be squased. That's why flex-
shrink: 0 is used here too. */

  /* We also
want it to appear after the text content, which is why we use order: 2 */
  .side {
    flex-grow: 0;
    flex-shrink: 0;
    height: 20rem;
    margin-left: 4rem;
    order: 2;
    width: 20rem;
  }
  /* For the .about , we do want it to use the remaining space available, in both directions, which is why
flex-grow and flex-shrink have both a value of 1 . */
  .about {
    flex-grow: 1;
    flex-shrink: 1;
  }
}
